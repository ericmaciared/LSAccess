
//Interface 0 AUTHENTICATION -> USERS
User* UsGetUser(unsigned char index);
//Pre: 0 < index < usersRegistered
//Post: return pointer to user in index.

User* UsRegisterUser(void);
//Pre: There is enough space to register a new user.
//Post: Returns pointer to new user space.

void UsDeleteUser(User* user);
//Pre: The pointer contains a user.
//Post: Deletes data in index pointer.

//Interface 1 AUTHENTICATION -> LCD
void LcDisplayWelcome(User* user, unsigned char* uid);
//Pre: --
//Post: Displays welcome message with name if registered as well as the UID
//for 3 seconds in the LCD Display

void LcDisplayIntroduceUID(void);
//Pre: --
//Post: Displays 'Introduce UID' in LCD display

void LcDisplayIntroduceName(void);
//Pre: --
//Post:

//Interface 2 AUTHENTICATION -> SPEAKER
void SpAddBeeps(char numBeeps);
//Pre: --
//Post: Sets number of beeps to sound in speaker.

//Interface 3 AUTHENTICATION -> DOOR
void DoOpenDoor(void);
//Pre: --
//Post: Opens door for 3 seconds.

//Interface 11 AUTHENTICATION -> GLOBALTIME
void GlSetTime(char hour, char min);
//Pre: --
//Post: Sets global time to given values

char GlGetHour(void);
//Pre: --
//Post: Returns global hour.

char GlGetMin(void);
//Pre: --
//Post: Return global mins.




//Interface 13 RFID -> AUTHENTICATION
void AuAuthenticate(unisgned char* uid);
//Pre: --
//Post: Authenticates user with UID.

//Interface -> TIMER
void TiResetTics(char Handle);
//Pre: 0<Handle<MAXTIMERS.
//Post: Writes in the tics of the Handle timer the universal tics of the system.

int TiGetTics(char Handle);
//Pre: 0<Handle<MAXTIMERS.
//Post: Less than 32767 tics have passed since the last TiResetTics.
//Post: Returns the number of tics from the last TiResetTics for the Handle timer.

char TiGetTimer(void);
//Pre: There are free timers.
//Post: Returns the Handler of a timer and marks it as busy.
//Post:	If there are not free timers left, returns a -1.

void TiFreeTimer (char Handle);
//Pre: 0<Handle<MAXTIMERS.
//Post: The Handle timer is marked as free.
